Proposing changes to Python itself
Improving Python’s code, documentation and tests are ongoing tasks that are never going to be “finished”, as Python operates as part of an ever-evolving system of technology. An even more challenging ongoing task than these necessary maintenance activities is finding ways to make Python, in the form of the standard library and the language definition, an even better tool in a developer’s toolkit.

While these kinds of change are much rarer than those described above, they do happen and that process is also described as part of this guide:

Adding to the stdlib

Changing the Python language

Other interpreter implementations
This guide is specifically for contributing to the Python reference interpreter, also known as CPython (while most of the standard library is written in Python, the interpreter core is written in C and integrates most easily with the C and C++ ecosystems).

There are other Python implementations, each with a different focus. Like CPython, they always have more things they would like to do than they have developers to work on them. Some major examples that may be of interest are:

PyPy: A Python interpreter focused on high speed (JIT-compiled) operation on major platforms.

GraalPy: A Python interpreter which has first-class support for embedding in Java, built on GraalVM.

Jython: A Python interpreter focused on good integration with the Java Virtual Machine (JVM) environment.

IronPython: A Python interpreter focused on good integration with the Common Language Runtime (CLR) provided by .NET and Mono.

Stackless: A Python interpreter focused on providing lightweight microthreads while remaining largely compatible with CPython specific extension modules.

MicroPython: A tiny Python interpreter with small subset of the Python standard library that is optimised to run on microcontrollers and in constrained environments.

CircuitPython: A fork of MicroPython designed to simplify experimenting and learning to code on low-cost microcontroller boards.